14 - Working with Elasticsearch SQL

With Elasticsearch SQL, you can access full-text search and easily extend the functionality with a familiar query syntax. You can even see your results in the tabular views. 

Elasticsearch provides a variety of approaches, such as the REST API interface, the command-line interface, the JDBC  driver, and the ODBC driver, to let you use SQL to perform search and aggregation.


Overview

Elasticsearch SQL is an X-Pack component, where X-Pack is an Elastic Stack extension that provides many features

drivers
	https://www.elastic.co/downloads/jdbc-client
	

Getting started

to start:
	had to edit this script to point to the x-pack env file
	./elasticsearch-sql-cli uri=http://10.0.2.15:9200/

base commands
	show tables;
	describe cf_etf_hist_price;
	select symbol from cf_etf;
	select symbol from cf_etf where symbol LIKE 'ACW%';
	show functions;
	show functions LIKE '%inu%';
	

Elasticsearch SQL does not have a DCL (Data Control Language) and TCL (Transactional Control Language) in its current version.
six aspects main aspects: including keywords, data types, operators, functions, and lexical
structure	

Reserved keywords are part of the language syntax that the server uses to parse and analyze the statements. 
If you use a reserved keyword as an identifier in the SQL statement, you must use double quotes to escape it:
ALL, AND, ANY, AS, ASC, BETWEEN, BY, CAST, CATALOG, CONVERT, CURRENT_DATE, CURRENT_TIMESTAMP, DAY, DAYS, DESC, DESCRIBE, DISTINCT, ESCAPE, EXISTS, EXPLAIN, EXTRACT, FALSE, FIRST, FROM, FULL, GROUP, HAVING, HOUR, HOURS, IN, INNER, INTERVAL, IS, JOIN, LEFT, LIKE, LIMIT, MATCH, MINUTE, MINUTES, MONTH, NATURAL, NOT, NULL, NULLS, ON, OR, ORDER, OUTER, RIGHT, RLIKE, QUERY, SECOND, SECONDS, SELECT, SESSION, TABL


Data type
Elasticsearch SQL almost inherits the data types from Elasticsearch.
	null, boolean, byte, short, integer, long, double, float, half_float, scaled_float, keyword, text, binary, datetime, ip, object, nested. 
The datetime data type in Elasticsearch SQL is the same as date in Elasticsearch. The reason for the name change is that it is not equivalent to DATE in ANSI SQL. Other data types that are only supported in Elasticsearch SQL are as follows:
	date, interval_year, interval_month, interval_day, interval_hour, interval_minute, interval_second, interval_year_to_month, interval_day_to_hour, interval_day_to_minute, interval_day_to_second, interval_hour_to_minute, interval_hour_to_second, interval_minute_to_second
These data types can only be used inside the SQL statement.

Operators
The following table lists the operators supported with their types:
Type		Operators
Arithmetic 	+, - (subtraction), *, /, %, - (unary)
Comparison 	=, <=>, <>, !=, <, <=, >, >=, BETWEEN, IN, IS NULL, IS NOT NULL
Logical		AND, OR, NOT
Fuzzy		LIKE, RLIKE

Functions
Elasticsearch SQL supports many built-in functions. 
	Aggregate
	Grouping
	Date-time
	Full-text search
	Mathematic
	String
	Type conversion
	Conditional
	System

SELECT has many optional parts that allow you to filter and shape the data you want to solve your complex problems. The complete syntax of the SELECT statement is complicated, but it can be described as follows, similar to what is in SQL:
	SELECT select_expr [, ...]
	[ FROM table_name [[AS] alias]]
	[ WHERE search_condition_1 ]
	[ GROUP BY expression [, ...] ]
	[ HAVING search_condition_2]
	[ ORDER BY order_expression [ ASC | DESC ] [, ...] ]
	[ LIMIT [ count ] ]
Elasticsearch only accepts one command at a time in the current stage. 
It does not support subqueries, only table_name (index) is accepted in the FROM clause.
To access multiple indices, you can use the asterisk (*) index pattern or SQL LIKE in the FROM clause.
Although the reserved keywords include LEFT , RIGHT , INNER , OUTER , and JOIN , Elasticsearch SQL does not yet support left , right , inner , and outer join

The sequence determines the output from a clause in one step that is available for the input to a clause in a subsequent step:
1. FROM clause
2. WHERE clause
3. GROUP BY clause
4. HAVING clause
5. SELECT clause
6. DISTINCT/ALL clause
7. ORDER BY clause		

DATABASE() and USER() system functions: The DATABASE() function returns the current working database instance, and the user() function returns the current user.

INTERVAL: for converting the subsequent literal into a date-time interval.
	select * from cf_etf_hist_price where date='2019-01-31' limit 1;
	
	uses INTERVAL to generate a datetime interval of 1 day. This interval is then added to the datetime value generated by casting the literal value, 2019-01-31 . The calculation will produce a 2019-02-01 date-time value. Therefore, the response will be a record where its date field is equal to 2010-02-01 :
	
	select * from cf_etf_hist_price where date=CAST('2019-01-31' AS DATETIME) + INTERVAL 1 day limit 1;

The histogram() function is used to generate buckets from the first parameter, the first parameter. Each bucket starts with a value and spans an interval, the second parameter. The first parameter can be a numeric expression, or a datetime expression. The interval will be a numeric value or a datetime value,
	select histogram(open, 0.5) AS open_price, count(*) AS count from cf_etf_hist_price where symbol='RFEM' group by open_price;
	

Elasticsearch SQL REST API
The SQL REST API accepts a SQL statement in JSON format, executes it, and returns a response.
You should use a parameter query with a SQL statement in the request body:
	POST /_sql?format=response_format
	{
		"query": "....",
		"parameter_x": parameter_x_value
	}

Kibana Dev Tools

Triple quotes (""") are supported in the Kibana console. It not only escapes double quotes (") inside the query string, but also allows a SQL statement to be written in multiline format.

retrieve all the records from the cf_etf index
format parameter - csv , json , tsv , txt , yaml , cbor , and smile for the response data.
POST /_sql?format=txt
{
  "query": """
  select * from cf_etf
  """
}

Same but with CSV out
POST /_sql?format=csv
{
  "query": """
  select * from cf_etf
  """
}

Cursor - If the records exceed the fetch_size parameter, a cursor field and its value will be returned in the response body. You use it to request the records for the next page.
Example:
		POST /_sql?format=json
		{
		  "query": """
		  select * from cf_etf ORDER BY symbol ASC
		  """,
		  "fetch_size": 1,
		  "page_timeout": "120s"
		}
Last line will be something like this:
"cursor" : "y/au<snipped>P//wc="

Get the next set with this:
	POST /_sql?format=json
	{
	   "cursor" : "y/au<snipped>P//wc="
	}


Elasticsearch SQL JDBC

Elasticsearch's SQL JDBC is a type 4 driver, which means it is a pure Java driver and platform-independent. It connects directly to Elasticsearch and converts JDBC calls to Elasticsearch SQL.
JDBC support is only available for the platinum license.