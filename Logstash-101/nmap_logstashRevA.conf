input {
  file {
    path => "/home/bikeride/nmap/*.xml"
    # port => 8000
    #codec => nmap
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "xml"
    codec => multiline {
        #pattern => "<nmaprun scanner"
        pattern => "<\!DOCTYPE nmaprun>"
        #pattern => "<scaninfo "
        #negate => "true"
        what => "previous"
    }
  }
}

filter {
    # the mutate/dissect will parse out the name part of the faile from the extension
    # this can be used as the project name
    mutate {
        split => { "path" => "/" }
        add_field => [ "full_file_name", "%{[path][-1]}" ]
        # broke
        #split => { "full_file_name" => "." }
        #add_field => [ "file_name", "%{[path][-1]}" ]
    }
        dissect {
        mapping => { 'full_file_name' => '%{proj_name}.%{}' }
    }

    # log the basic info of the scan like target and command switches
    if ([message] =~ "nmaprun scanner") {
        mutate {
            rename => {"message" => "scan_info"}
            add_field => [ "loop_id", "nmap_scanner" ]
        }
    } 
    else if ("<port protocol=" in [message] and "version=" in [message] ) {
        # this gets the service version data
        # basically if the -sV switch is used 
        dissect {
            mapping => { 'message' => '<port protocol="%{protocol}" portid="%{port}"><state state="%{port_state}" reason="%{reason}" reason_ttl="%{ttl}"/><service name="%{service_detected}" product="%{service_name}" version="%{service_version}" extrainfo="%{service_info}"%{}<cpe>%{cpe_info}</cpe>%{msg}'} 
        }
        mutate {
            add_field => [ "loop_id", "service_version" ]
        }
    } else if ([message] =~ "port protocol") {
        # parse the open ports if a base scan is used
        dissect {
            # <port protocol="tcp" portid="22"><state state="open" reason="syn-ack" reason_ttl="0"/><service name="ssh" method="table" conf="3"/></port>
            mapping => { 'message' => '<port protocol="%{protocol}" portid="%{port}"><state state="%{port_state}" reason="%{reason}" reason_ttl="%{ttl}"/><service name="%{service_detected}"%{msg}'}
        }
        mutate {
            add_field => [ "loop_id", "basic_port" ]
            #remove_field => ["message"]
        }
    } else if ([message] =~ "<osmatch") {
        # gets the OS info
        # the -oD switch
        dissect {
            mapping => { 'message' => '<osmatch name="%{os_detected}" accuracy="%{os_accuracy}" line="%{}'}
        }
         mutate {
            add_field => [ "loop_id", "os_detection" ]
            #remove_field => ["message"]
        }     
    }else {
        # drop the rest
        drop{}
    }

    mutate {
        #remove_field => ["host", "path", "type"]
        remove_field => ["message", "msg", "host", "path", "type", "full_file_name"]
    }

}


output {
  stdout {
    codec => rubydebug
  }
}
